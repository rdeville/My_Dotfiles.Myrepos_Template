#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# NAME:
#   .envrc
#     File that trigger 'direnv' when entering a folder
#
# DESCRIPTION:
#   THIS SCRIPT CAN ONLY BE USED WHITH 'direnv' PROGRAM
#
#   [Direnv](https://direnv.net/) is a tool allowing to automatically call a
#   specific script (.envrc) when entering or leaving a directory.
#   In short, once configured, you will have no command to type, after going
#   to your working directory.
#
#   If you are using direnv, the file .envrc.template at the root of the repo
#   provide you a template to automatically call this script.
#   To use it, you can copy it or create a symlinnk to it:
#
#   ```bash
#   # Assuming you are at the root of the repo
#   # Copy the template file
#   cp .envrc.template .envrc
#   # Or create a symlink to it
#   ln .envrc.template .envrc

#   # Review its content with your favorite editor (vim here as example)
#   vim .envrc
#
#   # If you understand and agree to what is scripted in .envrc, allow it
#   #for direnv
#   direnv allow
#   ```
#
#   And that is all, each time you will enter the directory where file
#   .envrc is, this script will automatically be loaded when entering it and
#   automatically unloaded when leaving it.
#
#

# SHELLCHECK
# ---------------------------------------------------------------------------
# Globally disable some shellcheck errors, warnings or remarks.
# shellcheck disable=SC1090
#   - SC1090: Can't follow non-constant source. Use a directive to specify location.
#

# Set echo coloring output
normal="\e[0m"     # Normal (white fg & transparent bg)
error="\e[0;31m"   # Red fg
info="\e[0;32m"    # Green fg

# Variables
direnv_script=".direnv/bin/activate_direnv"
direnv_script_sha1=".direnv/bin/.activate_direnv.sha1"

# Add protection mecanisme to ${direnv_script}
if ! [[ -f "${direnv_script}" ]]
then
  # Ensure that file .direnv/bin/activate_direnv exists
  echo -e "${error}\
[ERROR] Script ${direnv_script} does not exists.
[ERROR] Please refer to the README.md to know how to use it.${normal}"
  return 1
elif ! [[ -f .direnv/bin/.activate_direnv.sha1 ]]
then
  # Ensure that file .direnv/bin/activate_direnv does not have been modified
  echo -e "${info}\
[INFO] Commputing the SHA1 of .direnv/bin/activate_template.${normal}"
  sha1sum "${direnv_script}" > ${direnv_script_sha1}
elif [[ "$(sha1sum ${direnv_script})" != "$(cat ${direnv_script_sha1})" ]]
then
  echo -e "${error}\
[ERROR] Content of script ${direnv_script} have been modified.
[ERROR] Please review its content to ensure everything is right.
[ERROR] If it is the case, juste remove the file ${direnv_script_sha1}.${normal}"
  return 1
fi

# Load allowed .envrc in parent directory
source_up
# Set current direnv directory
export DIRENV_DIR="${PWD}"
# Include activate_direnv without method 'deactivate_direnv' to avoid issues
# Indeed, in 'activate_direnv' file, if script .direnv/bin/keepass is not
# working, script will unset already set environment variables
case $(uname) in
  # Handle MacOS distros, which to not have tac by default but tail -r
  *[Dd]arwin*)
    source <(tail -r .direnv/bin/activate_direnv | sed -n '0,/deactivate_direnv/!p' | tail -r)
    ;;
  # Handle Linux distros, which have tac.
  *[Ll]inux*)
    source <(tac .direnv/bin/activate_direnv | sed -n '0,/deactivate_direnv/!p' | tac)
    ;;
  # Handle unsupported distros
  *)
    echo -e "${error}\
[ERROR] Return value of command '\$(uname)' is not handled.
[ERROR] Please check its value and add handler for it in your .envrc.${normal}"
    echo -e "${info}\
[INFO] Do not hesitate to inform maintainers of the repos to add your distro.
[INFO] Or even better, do not hesitate to update .envrc.template and propose a
       merge request.${normal}"
    ;;
esac

# ------------------------------------------------------------------------------
# VIM MODELINE
# vim: ft=bash: ts=2: sw=2: sts=2
# ------------------------------------------------------------------------------
